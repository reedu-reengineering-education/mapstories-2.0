// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgres"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model spatial_ref_sys {
  srid      Int     @id
  auth_name String? @db.VarChar(256)
  auth_srid Int?
  srtext    String? @db.VarChar(2048)
  proj4text String? @db.VarChar(2048)
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")
  accounts      Account[]
  sessions      Session[]
  owner         Story[]   @relation("owner")
  story         Story[]   @relation("contributors")

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Story {
  id          String      @id @default(cuid())
  name        String?
  slug        String      @unique
  description String?
  theme       String?
  steps       StoryStep[] @relation("steps")
  firstStep   StoryStep?  @relation("firstStep", fields: [firstStepId], references: [id])
  firstStepId String?     @unique
  owner       User?       @relation("owner", fields: [ownerId], references: [id])
  ownerId     String?
  contributor User[]      @relation("contributors")
  visibility  Visibility
  createdAt   DateTime    @default(now()) @map(name: "created_at")
  updatedAt   DateTime    @default(now()) @map(name: "updated_at")

  @@map(name: "stories")
}

model StoryStep {
  id             String         @id @default(cuid())
  position       Int
  Story          Story?         @relation("steps", fields: [storyId], references: [id], onDelete: Cascade)
  storyId        String?
  feature        Json?
  content        SlideContent[]
  connections    Connection[] //incoming
  viewport       Json
  storyTitleStep Story?         @relation("firstStep")

  @@map(name: "storysteps")
}

model Theme {
  name       String @id @default(cuid())
  fontFamily String
}

model SlideContent {
  id          String    @id @default(cuid())
  content     String
  type        MediaType
  position    Int
  options     Json?
  storyStep   StoryStep @relation(fields: [storyStepId], references: [id], onDelete: Cascade)
  storyStepId String
  ogData      Json?
  media       Media?    @relation(fields: [mediaId], references: [id])
  mediaId     String?   @unique

  @@map(name: "slidecontent")
}

model Connection {
  id          String     @id @default(cuid())
  feature     Json?
  storyStep   StoryStep? @relation(fields: [storyStepId], references: [id])
  storyStepId String?
  width       Int?
  color       String?

  @@map(name: "connections")
}

model Media {
  id      String         @id @default(cuid())
  name    String
  size    String?
  url     String?
  altText String?
  caption String?
  slide   SlideContent[]

  @@map(name: "media")
}

enum Visibility {
  PRIVATE
  PUBLIC
}

enum MediaType {
  SPOTIFY
  YOUTUBE
  INSTAGRAM
  TIKTOK
  FACEBOOK
  TWITTER
  WIKIPEDIA
  SOUNDCLOUD
  VIMEO
  DAILYMOTION
  PADLET
  TEXT
  TITLE
  VIDEO
  IMAGE
  EXTERNALIMAGE
  AUDIO
  GOOGLESTREETVIEW
}
